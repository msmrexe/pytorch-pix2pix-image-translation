"""
Main Pix2Pix model class that wraps the Generator and Discriminator
and defines the loss functions.
"""
import torch
import torch.nn as nn
from src import config

class Pix2PixModel(nn.Module):
    """
    Wraps the Generator and Discriminator and manages loss calculation.
    """
    def __init__(self, generator, discriminator):
        super(Pix2PixModel, self).__init__()
        
        self.generator = generator
        self.discriminator = discriminator
        
        # Loss functions
        # BCEWithLogitsLoss is more numerically stable than Sigmoid + BCELoss
        self.criterion_gan = nn.BCEWithLogitsLoss()
        self.criterion_l1 = nn.L1Loss()
        
    def generator_loss(self, fake_output, fake_images, real_images):
        """
        Calculates the total generator loss.
        L_Generator = L_GAN + lambda * L_L1
        
        Args:
            fake_output (torch.Tensor): Discriminator's output for fake images.
            fake_images (torch.Tensor): Images generated by the generator.
            real_images (torch.Tensor): Ground truth real images.
        
        Returns:
            torch.Tensor: Total generator loss.
        """
        # GAN loss: D(x, G(x)) -> 1
        # We want to fool the discriminator, so we pass
        # fake_output (D's logits) and target labels of 1s.
        target_is_real = torch.ones_like(fake_output, device=config.DEVICE)
        adversarial_loss = self.criterion_gan(fake_output, target_is_real)
        
        # L1 loss: || y - G(x) ||_1
        # Measures pixel-wise difference between generated and real images
        l1_loss = self.criterion_l1(fake_images, real_images)
        
        total_loss = adversarial_loss + (config.LAMBDA_L1 * l1_loss)
        return total_loss, adversarial_loss, l1_loss

    def discriminator_loss(self, real_output, fake_output):
        """
        Calculates the total discriminator loss.
        L_Discriminator = 0.5 * (L_real + L_fake)
        
        Args:
            real_output (torch.Tensor): Discriminator's output for real image pairs.
            fake_output (torch.Tensor): Discriminator's output for fake image pairs.
            
        Returns:
            torch.Tensor: Total discriminator loss.
        """
        # Real loss: D(x, y) -> 1
        target_is_real = torch.ones_like(real_output, device=config.DEVICE)
        real_loss = self.criterion_gan(real_output, target_is_real)
        
        # Fake loss: D(x, G(x)) -> 0
        target_is_fake = torch.zeros_like(fake_output, device=config.DEVICE)
        fake_loss = self.criterion_gan(fake_output, target_is_fake)
        
        total_loss = (real_loss + fake_loss) * 0.5
        return total_loss
